"""–ú–æ–Ω–∏—Ç–æ—Ä –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
import asyncio
import json
from datetime import datetime
from typing import Set
from telegram import Bot
from telegram.constants import ParseMode
from dotenv import load_dotenv
import os

from ..database import get_db_cursor
from .news_analyzer import NewsAnalyzer

load_dotenv()


class HotNewsMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö"""
    
    def __init__(self, hotness_threshold: float = 0.7, check_interval: int = 60):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        if not self.chat_id:
            raise ValueError("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        self.bot = Bot(token=self.token)
        self.analyzer = NewsAnalyzer()
        
        self.hotness_threshold = hotness_threshold
        self.check_interval = check_interval
        self.notified_news: Set[int] = set()  # ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    
    async def check_and_notify(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        hot_news = self.get_hot_news()
        
        for news in hot_news:
            if news['id'] in self.notified_news:
                continue
            
            print(f"üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ä—è—á–µ–π –Ω–æ–≤–æ—Å—Ç–∏: {news['headline'][:50]}...")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                analysis = self.analyzer.generate_full_analysis({
                    'headline': news['headline'],
                    'content': news['content'],
                    'tickers': news['tickers'],
                    'hotness': news['ai_hotness']
                })
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self.format_hot_news_alert(news, analysis)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                self.notified_news.add(news['id'])
                
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_hot_news(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT 
                    lan.id,
                    lan.headline,
                    lan.content,
                    lan.ai_hotness,
                    lan.tickers_json,
                    lan.urls_json,
                    lan.published_time,
                    sc.doc_count,
                    sc.first_time,
                    sc.last_time
                FROM llm_analyzed_news lan
                JOIN story_clusters sc ON lan.id_cluster = sc.id
                WHERE lan.ai_hotness >= %s
                ORDER BY lan.created_at DESC
                LIMIT 10
            """, (self.hotness_threshold,))
            
            news_list = []
            for row in cursor.fetchall():
                news_list.append({
                    'id': row['id'],
                    'headline': row['headline'],
                    'content': row['content'],
                    'ai_hotness': row['ai_hotness'],
                    'tickers': json.loads(row['tickers_json']) if row['tickers_json'] else [],
                    'urls': json.loads(row['urls_json']) if row['urls_json'] else [],
                    'published_time': row['published_time'],
                    'doc_count': row['doc_count'],
                    'first_time': row['first_time'],
                    'last_time': row['last_time']
                })
            
            return news_list
    
    def format_hot_news_alert(self, news: dict, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –æ –≥–æ—Ä—è—á–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        
        hotness = news['ai_hotness']
        tickers_str = ', '.join(news['tickers']) if news['tickers'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'
        
        # –°—Å—ã–ª–∫–∏
        urls = news.get('urls', [])[:3]
        sources_str = '\n'.join([f"‚Ä¢ {url}" for url in urls]) if urls else '–Ω–µ—Ç'
        
        # Timeline
        first_time = news.get('first_time')
        last_time = news.get('last_time')
        timeline = f"–ü–µ—Ä–≤–æ–µ: {first_time.strftime('%d.%m %H:%M')}"
        if first_time != last_time:
            timeline += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_time.strftime('%d.%m %H:%M')}"
        
        message = f"""
üö® *–ì–û–†–Ø–ß–ê–Ø –ù–û–í–û–°–¢–¨!*
üî• *Hotness: {hotness:.2f}/1.00*

*{news['headline']}*

üí° *–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å:*
{analysis.get('why_now', '–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...')}

üìä *–¢–∏–∫–µ—Ä—ã:* {tickers_str}
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:* {news.get('doc_count', 1)}

‚è∞ *Timeline:*
{timeline}

üìù *–ê–Ω–∞–ª–∏–∑:*
{analysis.get('draft', '–î–µ—Ç–∞–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è...')}

üéØ *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ:*
{analysis.get('trading_signal', '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑')}

üîó *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*
{sources_str}
        """.strip()
        
        return message
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ü–∏–∫–ª–µ"""
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω")
        print(f"   –ü–æ—Ä–æ–≥ hotness: {self.hotness_threshold}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval}—Å")
        print(f"   Chat ID: {self.chat_id}")
        
        while True:
            try:
                await self.check_and_notify()
                await asyncio.sleep(self.check_interval)
            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ: {e}")
                await asyncio.sleep(self.check_interval)

