"""Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
import os
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Set
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode
from html import escape
from dotenv import load_dotenv

from ..database import get_db_cursor, get_db_connection
from .news_analyzer import NewsAnalyzer
from .subscribers_schema import (
    create_subscribers_table,
    add_subscriber,
    remove_subscriber,
    get_active_subscribers,
    is_subscribed,
    update_last_notification,
    get_subscriber_stats
)

load_dotenv()


class NewsBot:
    """Telegram –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, enable_monitor: bool = True, hotness_threshold: float = 0.7, check_interval: int = 60):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        self.analyzer = NewsAnalyzer()
        self.app = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("top", self.top_command))
        self.app.add_handler(CommandHandler("latest", self.latest_command))
        self.app.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.app.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        self.app.add_handler(CommandHandler("mystatus", self.mystatus_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self._init_subscribers_table()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        self.enable_monitor = enable_monitor
        self.hotness_threshold = hotness_threshold
        self.check_interval = check_interval
        self.notified_news: Set[int] = set()
        
        # TELEGRAM_CHAT_ID —Ç–µ–ø–µ—Ä—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –ë–î
        self.legacy_chat_id = os.getenv('TELEGRAM_CHAT_ID')  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    def _init_subscribers_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            db_conn = get_db_connection()
            db_conn.connect()
            create_subscribers_table(db_conn._connection)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å legacy TELEGRAM_CHAT_ID, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            if self.legacy_chat_id:
                try:
                    chat_id = int(self.legacy_chat_id)
                    add_subscriber(db_conn._connection, chat_id, username="legacy_user")
                    print(f"‚úÖ Legacy chat_id {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏")
                except:
                    pass
            
            db_conn.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_message = """
üî• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AiAlphaPulse!</b>

–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/top - –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ hotness
/latest - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/mystatus - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞

üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/top 10 24</code> - –¢–æ–ø-10 –∑–∞ 24 —á–∞—Å–∞
<code>/top 5 48</code> - –¢–æ–ø-5 –∑–∞ 48 —á–∞—Å–æ–≤
<code>/latest 5</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
<code>/latest</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π

üîî <b>–ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (hotness ‚â• 0.7) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
        """
        await update.message.reply_text(welcome_message, parse_mode=ParseMode.HTML)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>1Ô∏è‚É£ –¢–æ–ø –ø–æ hotness:</b>
<code>/top [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—á–∞—Å—ã]</code>
‚Ä¢ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π (1-20, default: 10)
‚Ä¢ —á–∞—Å—ã - –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ (1-168, default: 24)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/top</code> - –¢–æ–ø-10 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
<code>/top 5</code> - –¢–æ–ø-5 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞  
<code>/top 15 48</code> - –¢–æ–ø-15 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤

<b>2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>
<code>/latest [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]</code>
‚Ä¢ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π (1-20, default: 10)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/latest</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
<code>/latest 5</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
<code>/latest 20</code> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –Ω–æ–≤–æ—Å—Ç–µ–π

üìä <b>–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –≥–æ—Ä—è—á–µ—Å—Ç–∏ (0-1)
‚Ä¢ –¢–∏–∫–µ—Ä—ã/–∞–∫—Ç–∏–≤—ã
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

üî• <b>–î–ª—è –æ—Å–æ–±–æ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</b> (‚â•0.7):
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–∫—Ç–∏–≤–∞–º
        """
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        try:
            db_conn = get_db_connection()
            db_conn.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏
            if is_subscribed(db_conn._connection, chat_id):
                await update.message.reply_text(
                    "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö!"
                )
                db_conn.close()
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            success = add_subscriber(
                db_conn._connection,
                chat_id=chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            db_conn.close()
            
            if success:
                await update.message.reply_text(
                    "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö (hotness ‚â• 0.7).\n\n"
                    "–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        chat_id = update.effective_chat.id
        
        try:
            db_conn = get_db_connection()
            db_conn.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏
            if not is_subscribed(db_conn._connection, chat_id):
                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                    "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe"
                )
                db_conn.close()
                return
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º
            success = remove_subscriber(db_conn._connection, chat_id)
            
            db_conn.close()
            
            if success:
                await update.message.reply_text(
                    "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                    "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def mystatus_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mystatus - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
        chat_id = update.effective_chat.id
        
        try:
            db_conn = get_db_connection()
            db_conn.connect()
            
            subscribed = is_subscribed(db_conn._connection, chat_id)
            stats = get_subscriber_stats(db_conn._connection)
            
            db_conn.close()
            
            if subscribed:
                status_message = f"""
‚úÖ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å: –ü–æ–¥–ø–∏—Å–∞–Ω</b>

üîî –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö (hotness ‚â• {self.hotness_threshold}).

üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
‚Ä¢ –ü–æ—Ä–æ–≥ hotness: {self.hotness_threshold}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval}—Å

–î–ª—è –æ—Ç–ø–∏—Å–∫–∏: /unsubscribe
                """
            else:
                status_message = f"""
üîï <b>–í–∞—à —Å—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω</b>

–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: /subscribe
                """
            
            await update.message.reply_text(status_message.strip(), parse_mode=ParseMode.HTML)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def top_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /top [limit] [hours]"""
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = context.args
        limit = 10
        hours = 24
        
        try:
            if len(args) >= 1:
                limit = min(max(int(args[0]), 1), 20)
            if len(args) >= 2:
                hours = min(max(int(args[1]), 1), 168)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /top [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [—á–∞—Å—ã]"
            )
            return
        
        await update.message.reply_text(
            f"üîç –ü–æ–ª—É—á–∞—é —Ç–æ–ø-{limit} –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours}—á..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
        news_list = self.get_top_news(limit, hours)
        
        if not news_list:
            await update.message.reply_text(
                f"üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
        for i, news in enumerate(news_list, 1):
            message = self.format_news_message(news, i, len(news_list))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            keyboard = [[
                InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                    callback_data=f"analyze_{news['id']}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
    
    async def latest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /latest [limit] - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"""
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        args = context.args
        limit = 10
        
        try:
            if len(args) >= 1:
                limit = min(max(int(args[0]), 1), 20)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /latest [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"
            )
            return
        
        await update.message.reply_text(
            f"üîç –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –Ω–æ–≤–æ—Å—Ç–µ–π..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
        news_list = self.get_latest_news(limit)
        
        if not news_list:
            await update.message.reply_text(
                "üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
        for i, news in enumerate(news_list, 1):
            message = self.format_latest_news_message(news, i, len(news_list))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            keyboard = [[
                InlineKeyboardButton(
                    "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                    callback_data=f"analyze_{news['id']}"
                )
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("analyze_"):
            news_id = int(query.data.split("_")[1])
            
            await query.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –ë–î
            news = self.get_news_by_id(news_id)
            if not news:
                await query.edit_message_text("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM
            analysis = self.analyzer.generate_full_analysis({
                'headline': news['headline'],
                'content': news['content'],
                'tickers': news['tickers'],
                'hotness': news['ai_hotness']
            })
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            detail_message = self.format_detailed_analysis(news, analysis)
            await query.edit_message_text(
                detail_message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
    
    def get_top_news(self, limit: int, hours: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î"""
        time_threshold = datetime.now() - timedelta(hours=hours)
        
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT 
                    lan.id,
                    lan.headline,
                    lan.content,
                    lan.ai_hotness,
                    lan.tickers_json,
                    lan.urls_json,
                    lan.published_time,
                    lan.id_cluster,
                    sc.first_time,
                    sc.last_time,
                    sc.doc_count
                FROM llm_analyzed_news lan
                JOIN story_clusters sc ON lan.id_cluster = sc.id
                WHERE lan.published_time >= %s
                ORDER BY lan.ai_hotness DESC, lan.published_time DESC
                LIMIT %s
            """, (time_threshold, limit))
            
            news_list = []
            for row in cursor.fetchall():
                news_list.append({
                    'id': row['id'],
                    'headline': row['headline'],
                    'content': row['content'],
                    'ai_hotness': row['ai_hotness'],
                    'tickers': json.loads(row['tickers_json']) if row['tickers_json'] else [],
                    'urls': json.loads(row['urls_json']) if row['urls_json'] else [],
                    'published_time': row['published_time'],
                    'first_time': row['first_time'],
                    'last_time': row['last_time'],
                    'doc_count': row['doc_count']
                })
            
            return news_list
    
    def get_latest_news(self, limit: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î (–ø–æ created_at)"""
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT 
                    lan.id,
                    lan.headline,
                    lan.content,
                    lan.ai_hotness,
                    lan.tickers_json,
                    lan.urls_json,
                    lan.published_time,
                    lan.created_at,
                    lan.id_cluster,
                    sc.first_time,
                    sc.last_time,
                    sc.doc_count
                FROM llm_analyzed_news lan
                JOIN story_clusters sc ON lan.id_cluster = sc.id
                ORDER BY lan.created_at DESC
                LIMIT %s
            """, (limit,))
            
            news_list = []
            for row in cursor.fetchall():
                news_list.append({
                    'id': row['id'],
                    'headline': row['headline'],
                    'content': row['content'],
                    'ai_hotness': row['ai_hotness'],
                    'tickers': json.loads(row['tickers_json']) if row['tickers_json'] else [],
                    'urls': json.loads(row['urls_json']) if row['urls_json'] else [],
                    'published_time': row['published_time'],
                    'created_at': row['created_at'],
                    'first_time': row['first_time'],
                    'last_time': row['last_time'],
                    'doc_count': row['doc_count']
                })
            
            return news_list
    
    def get_news_by_id(self, news_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID"""
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT 
                    lan.id,
                    lan.headline,
                    lan.content,
                    lan.ai_hotness,
                    lan.tickers_json,
                    lan.urls_json,
                    lan.published_time
                FROM llm_analyzed_news lan
                WHERE lan.id = %s
            """, (news_id,))
            
            row = cursor.fetchone()
            if not row:
                return None
            
            return {
                'id': row['id'],
                'headline': row['headline'],
                'content': row['content'],
                'ai_hotness': row['ai_hotness'],
                'tickers': json.loads(row['tickers_json']) if row['tickers_json'] else [],
                'urls': json.loads(row['urls_json']) if row['urls_json'] else []
            }
    
    def format_news_message(self, news: Dict, index: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—å—é"""
        hotness = news['ai_hotness']
        hotness_emoji = self._get_hotness_emoji(hotness)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML
        headline_escaped = escape(news['headline'])
        
        # –¢–∏–∫–µ—Ä—ã
        tickers_list = news.get('tickers', [])
        tickers_str = escape(', '.join(tickers_list)) if tickers_list else '‚Äî'
        
        # –°—Å—ã–ª–∫–∏ (–º–∞–∫—Å 3)
        urls = news.get('urls', [])[:3]
        if urls:
            sources_list = []
            for url in urls:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_url = url if len(url) < 50 else url[:47] + '...'
                sources_list.append(f'‚Ä¢ <a href="{url}">{escape(display_url)}</a>')
            sources_str = '\n'.join(sources_list)
        else:
            sources_str = '‚Äî'
        
        # Timeline
        first_time = news.get('first_time')
        last_time = news.get('last_time')
        timeline = f"–ü–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {first_time.strftime('%d.%m %H:%M')}"
        if first_time != last_time:
            timeline += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_time.strftime('%d.%m %H:%M')}"
        
        message = f"""
{hotness_emoji} <b>#{index}/{total} –ù–æ–≤–æ—Å—Ç—å</b>

<b>{headline_escaped}</b>

üî• <b>Hotness:</b> {hotness:.2f}/1.00
üìä <b>–¢–∏–∫–µ—Ä—ã:</b> {tickers_str}
üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {news.get('doc_count', 1)}

‚è∞ <b>Timeline:</b>
{timeline}

üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
{sources_str}
        """.strip()
        
        return message
    
    def format_latest_news_message(self, news: Dict, index: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        hotness = news['ai_hotness']
        hotness_emoji = self._get_hotness_emoji(hotness)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML
        headline_escaped = escape(news['headline'])
        
        # –¢–∏–∫–µ—Ä—ã
        tickers_list = news.get('tickers', [])
        tickers_str = escape(', '.join(tickers_list)) if tickers_list else '‚Äî'
        
        # –°—Å—ã–ª–∫–∏ (–º–∞–∫—Å 3)
        urls = news.get('urls', [])[:3]
        if urls:
            sources_list = []
            for url in urls:
                display_url = url if len(url) < 50 else url[:47] + '...'
                sources_list.append(f'‚Ä¢ <a href="{url}">{escape(display_url)}</a>')
            sources_str = '\n'.join(sources_list)
        else:
            sources_str = '‚Äî'
        
        # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É
        created_at = news.get('created_at')
        created_str = created_at.strftime('%d.%m.%Y %H:%M') if created_at else '‚Äî'
        
        # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        published_time = news.get('published_time')
        published_str = published_time.strftime('%d.%m.%Y %H:%M') if published_time else '‚Äî'
        
        message = f"""
{hotness_emoji} <b>#{index}/{total} –ù–æ–≤–æ—Å—Ç—å</b>

<b>{headline_escaped}</b>

üî• <b>Hotness:</b> {hotness:.2f}/1.00
üìä <b>–¢–∏–∫–µ—Ä—ã:</b> {tickers_str}
üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {news.get('doc_count', 1)}

‚è∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {created_str}
üìÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {published_str}

üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
{sources_str}
        """.strip()
        
        return message
    
    def format_detailed_analysis(self, news: Dict, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        hotness = news['ai_hotness']
        hotness_emoji = self._get_hotness_emoji(hotness)
        
        # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown —Å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
        message = f"""
{hotness_emoji} *–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó*

*{news['headline']}*

üî• *Hotness:* {hotness:.2f}/1.00

üí° *–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å:*
{analysis.get('why_now', '–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è...')}

üìù *–ß–µ—Ä–Ω–æ–≤–∏–∫ –∞–Ω–∞–ª–∏–∑–∞:*
```
{analysis.get('draft', '–î–µ—Ç–∞–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è...')}
```
        """.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        if hotness >= 0.7 and 'trading_signal' in analysis:
            message += f"\n\nüéØ *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ:*\n```\n{analysis['trading_signal']}\n```"
        
        return message
    
    def _get_hotness_emoji(self, hotness: float) -> str:
        """–≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä—è—á–Ω–æ—Å—Ç–∏"""
        if hotness >= 0.8:
            return "üî¥üî•"
        elif hotness >= 0.6:
            return "üü†üî•"
        elif hotness >= 0.4:
            return "üü°"
        else:
            return "üü¢"
    
    async def monitor_hot_news(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä–æ–≥: {self.hotness_threshold})")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                db_conn = get_db_connection()
                db_conn.connect()
                subscribers = get_active_subscribers(db_conn._connection)
                db_conn.close()
                
                if not subscribers:
                    print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                    await asyncio.sleep(self.check_interval)
                    continue
                
                print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                hot_news = self.get_hot_news_for_monitor()
                
                for news in hot_news:
                    if news['id'] in self.notified_news:
                        continue
                    
                    print(f"üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {news['headline'][:50]}...")
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                        analysis = self.analyzer.generate_full_analysis({
                            'headline': news['headline'],
                            'content': news['content'],
                            'tickers': news['tickers'],
                            'hotness': news['ai_hotness']
                        })
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = self.format_hot_news_alert(news, analysis)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                        sent_count = 0
                        failed_count = 0
                        
                        for chat_id in subscribers:
                            try:
                                await self.app.bot.send_message(
                                    chat_id=chat_id,
                                    text=message,
                                    parse_mode=ParseMode.MARKDOWN,
                                    disable_web_page_preview=True
                                )
                                sent_count += 1
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                db_conn = get_db_connection()
                                db_conn.connect()
                                update_last_notification(db_conn._connection, chat_id)
                                db_conn.close()
                                
                                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                                
                            except Exception as e:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ chat_id {chat_id}: {e}")
                                failed_count += 1
                        
                        self.notified_news.add(news['id'])
                        print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")
                        
                        await asyncio.sleep(2)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ: {e}")
                await asyncio.sleep(self.check_interval)
    
    def get_hot_news_for_monitor(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π check_interval * 2)"""
        with get_db_cursor() as cursor:
            # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –Ω–µ –±—É–¥–µ–º —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã
            cursor.execute("""
                SELECT 
                    lan.id,
                    lan.headline,
                    lan.content,
                    lan.ai_hotness,
                    lan.tickers_json,
                    lan.urls_json,
                    lan.published_time,
                    lan.created_at,
                    sc.doc_count,
                    sc.first_time,
                    sc.last_time
                FROM llm_analyzed_news lan
                JOIN story_clusters sc ON lan.id_cluster = sc.id
                WHERE lan.ai_hotness >= %s
                    AND lan.created_at >= NOW() - INTERVAL '%s seconds'
                ORDER BY lan.created_at DESC
                LIMIT 20
            """, (self.hotness_threshold, self.check_interval * 2))
            
            news_list = []
            for row in cursor.fetchall():
                news_list.append({
                    'id': row['id'],
                    'headline': row['headline'],
                    'content': row['content'],
                    'ai_hotness': row['ai_hotness'],
                    'tickers': json.loads(row['tickers_json']) if row['tickers_json'] else [],
                    'urls': json.loads(row['urls_json']) if row['urls_json'] else [],
                    'published_time': row['published_time'],
                    'doc_count': row['doc_count'],
                    'first_time': row['first_time'],
                    'last_time': row['last_time']
                })
            
            return news_list
    
    def format_hot_news_alert(self, news: dict, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –æ –≥–æ—Ä—è—á–µ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        hotness = news['ai_hotness']
        tickers_str = ', '.join(news['tickers']) if news['tickers'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'
        
        urls = news.get('urls', [])[:3]
        sources_str = '\n'.join([f"‚Ä¢ {url}" for url in urls]) if urls else '–Ω–µ—Ç'
        
        first_time = news.get('first_time')
        last_time = news.get('last_time')
        timeline = f"–ü–µ—Ä–≤–æ–µ: {first_time.strftime('%d.%m %H:%M')}"
        if first_time != last_time:
            timeline += f"\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_time.strftime('%d.%m %H:%M')}"
        
        message = f"""
üö® *–ì–û–†–Ø–ß–ê–Ø –ù–û–í–û–°–¢–¨!*
üî• *Hotness: {hotness:.2f}/1.00*

*{news['headline']}*

üí° *–ü–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Å–µ–π—á–∞—Å:*
{analysis.get('why_now', '–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...')}

üìä *–¢–∏–∫–µ—Ä—ã:* {tickers_str}
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç–æ–≤:* {news.get('doc_count', 1)}

‚è∞ *Timeline:*
{timeline}

üìù *–ß–µ—Ä–Ω–æ–≤–∏–∫ –∞–Ω–∞–ª–∏–∑–∞:*
```
{analysis.get('draft', '–î–µ—Ç–∞–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è...')}
```
        """.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'trading_signal' in analysis:
            message += f"\n\nüéØ *–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ:*\n```\n{analysis['trading_signal']}\n```"
        
        message += f"\n\nüîó *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n{sources_str}"
        
        return message
    
    async def post_init(self, application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        if self.enable_monitor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            asyncio.create_task(self.monitor_hot_news())
            print(f"üîç –ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (–ø–æ—Ä–æ–≥: {self.hotness_threshold}, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}—Å)")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º post_init callback
        self.app.post_init = self.post_init
        
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)

