"""CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
import argparse
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent.parent
load_dotenv(project_root / '.env')

sys.path.append(str(project_root))

from src.database import get_db_connection
from src.llm.processor import LLMNewsProcessor


def main():
    parser = argparse.ArgumentParser(
        description='LLM –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å 10 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ GPT-3.5-turbo
  python -m src.llm.runner --limit 10
  
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å 5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ Claude
  python -m src.llm.runner --limit 5 --model anthropic/claude-3-haiku
  
  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  python -m src.llm.runner --show-top 10
  
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
  python -m src.llm.runner --limit 100
        """
    )
    
    parser.add_argument('--limit', type=int, default=10,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (default: 10)')
    parser.add_argument('--model', default=None,
                        help='–ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (default: –∏–∑ LLM_MODEL –∏–ª–∏ deepseek/deepseek-chat)')
    parser.add_argument('--delay', type=float, default=float(os.getenv('LLM_DELAY', '1.0')),
                        help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: –∏–∑ LLM_DELAY –∏–ª–∏ 1.0)')
    parser.add_argument('--api-key', 
                        help='OpenRouter API –∫–ª—é—á (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ OPENROUTER_API_KEY)')
    parser.add_argument('--show-top', type=int, metavar='N',
                        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø N —Å–∞–º—ã—Ö –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π')
    parser.add_argument('--min-hotness', type=float, default=0.7,
                        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–æ—Ä—è—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–ø–∞ (default: 0.7)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = args.api_key or os.getenv('OPENROUTER_API_KEY')
    if not api_key and not args.show_top:
        print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENROUTER_API_KEY –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --api-key")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  export OPENROUTER_API_KEY='your-key-here'")
        print("  python -m src.llm.runner --limit 5")
        sys.exit(1)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    db_conn = get_db_connection()
    db_conn.connect()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = LLMNewsProcessor(
            conn=db_conn._connection,
            api_key=api_key,
            model=args.model
        )
        
        if args.show_top:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –≥–æ—Ä—è—á–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            print(f"\n{'='*60}")
            print(f"üî• –¢–û–ü-{args.show_top} –°–ê–ú–´–• –ì–û–†–Ø–ß–ò–• –ù–û–í–û–°–¢–ï–ô")
            print(f"{'='*60}\n")
            
            hot_news = processor.get_top_hot_news(
                limit=args.show_top,
                min_hotness=args.min_hotness
            )
            
            if not hot_news:
                print("üì≠ –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ç—Ä–µ–±—É–µ–º–æ–π –≥–æ—Ä—è—á–Ω–æ—Å—Ç—å—é")
            else:
                for i, news in enumerate(hot_news, 1):
                    print(f"{i}. {news['headline'][:70]}...")
                    print(f"   üî• Hotness: {news['ai_hotness']:.3f}")
                    print(f"   üìä Tickers: {', '.join(news['tickers']) if news['tickers'] else 'N/A'}")
                    print(f"   üïí Time: {news['published_time']}")
                    print(f"   üîó URLs: {len(news['urls'])}")
                    print()
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
            print(f"\n{'='*60}")
            print(f"ü§ñ LLM –ê–ù–ê–õ–ò–ó –ù–û–í–û–°–¢–ù–´–• –ö–õ–ê–°–¢–ï–†–û–í")
            print(f"{'='*60}")
            print(f"üéØ –ú–æ–¥–µ–ª—å: {args.model}")
            print(f"üìä –õ–∏–º–∏—Ç: {args.limit}")
            print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {args.delay}—Å")
            print(f"{'='*60}\n")
            
            stats = processor.process_batch(
                limit=args.limit,
                delay=args.delay
            )
            
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    finally:
        db_conn.close()


if __name__ == "__main__":
    main()

