#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / 'src'))
from database import get_db_connection, get_db_cursor


def test_postgres_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
    
    try:
        db_conn = get_db_connection()
        db_conn.connect()
        
        with get_db_cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            tables = [row[0] for row in cursor.fetchall()]
            print("üìã –¢–∞–±–ª–∏—Ü—ã:", tables)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            for table in ['articles', 'normalized_articles', 'story_clusters', 'cluster_members', 'vectors']:
                if table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                else:
                    print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False
    finally:
        if 'db_conn' in locals():
            db_conn.close()


def show_sample_data():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÑ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:")
    
    try:
        db_conn = get_db_connection()
        db_conn.connect()
        
        with get_db_cursor() as cursor:
            # –ü—Ä–∏–º–µ—Ä—ã –∏–∑ articles
            cursor.execute("SELECT id, title, source, published FROM articles LIMIT 3")
            articles = cursor.fetchall()
            print("\nüì∞ –°—Ç–∞—Ç—å–∏ (–ø–µ—Ä–≤—ã–µ 3):")
            for article in articles:
                print(f"  ID: {article['id']}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title'][:50]}..., –ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']}")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∏–∑ normalized_articles
            cursor.execute("SELECT original_id, title, quality_score, language_code FROM normalized_articles LIMIT 3")
            normalized = cursor.fetchall()
            print("\nüìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–ø–µ—Ä–≤—ã–µ 3):")
            for norm in normalized:
                print(f"  ID: {norm['original_id']}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {norm['title'][:50]}..., –ö–∞—á–µ—Å—Ç–≤–æ: {norm['quality_score']:.2f}, –Ø–∑—ã–∫: {norm['language_code']}")
            
            # –ü—Ä–∏–º–µ—Ä—ã –∏–∑ story_clusters
            cursor.execute("SELECT id, headline, doc_count, hotness FROM story_clusters LIMIT 3")
            clusters = cursor.fetchall()
            print("\nüîç –ö–ª–∞—Å—Ç–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–µ—Ä–≤—ã–µ 3):")
            for cluster in clusters:
                print(f"  ID: {cluster['id']}, –ó–∞–≥–æ–ª–æ–≤–æ–∫: {cluster['headline'][:50]}..., –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {cluster['doc_count']}, –ì–æ—Ä—è—á–Ω–æ—Å—Ç—å: {cluster['hotness']:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    finally:
        if 'db_conn' in locals():
            db_conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    if test_postgres_connection():
        show_sample_data()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


if __name__ == "__main__":
    main()