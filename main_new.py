"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import asyncio
import threading
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config.settings import settings

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
from infrastructure.database.connection import db_connection, DatabaseConnection
from infrastructure.database.repositories import SQLArticleRepository, SQLFeedRepository
from infrastructure.parsers.rss_parser import RSSParser
from infrastructure.parsers.telegram_parser import TelegramParser
from infrastructure.external.feed_initializer import FeedInitializer

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
from core.services.article_service import ArticleService
from core.services.parsing_service import ParsingService

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ use cases
from core.use_cases.get_articles_use_case import GetArticlesUseCase
from core.use_cases.parse_news_use_case import ParseNewsUseCase
from core.use_cases.get_stats_use_case import GetStatsUseCase

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ API
from infrastructure.api.controllers import ArticleController, ParsingController, StatsController
from infrastructure.api.schemas import ArticleResponse, StatsResponse, ParseResponse, HealthResponse

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
article_repository = None
feed_repository = None
article_service = None
parsing_service = None
article_controller = None
parsing_controller = None
stats_controller = None


def setup_dependency_injection():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    global article_repository, feed_repository, article_service, parsing_service
    global article_controller, parsing_controller, stats_controller
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    article_repository = SQLArticleRepository()
    feed_repository = SQLFeedRepository()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
    rss_parser = RSSParser()
    telegram_parser = TelegramParser()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    article_service = ArticleService(article_repository)
    parsing_service = ParsingService(article_repository, feed_repository, rss_parser, telegram_parser)
    
    # –°–æ–∑–¥–∞–µ–º use cases
    get_articles_use_case = GetArticlesUseCase(article_service)
    parse_news_use_case = ParseNewsUseCase(parsing_service)
    get_stats_use_case = GetStatsUseCase(article_service)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    article_controller = ArticleController(get_articles_use_case)
    parsing_controller = ParsingController(parse_news_use_case)
    stats_controller = StatsController(get_stats_use_case)


# Lifespan event handler
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ RSS Parser API —Å —á–∏—Å—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        if not DatabaseConnection.wait_for_database():
            raise Exception("Database connection failed")
        
        db_connection.create_tables()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI
    setup_dependency_injection()
    print("‚úÖ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω—Ç –∏ –∫–∞–Ω–∞–ª–æ–≤
    try:
        feed_initializer = FeedInitializer()
        await feed_initializer.initialize_feeds()
        print("‚úÖ –õ–µ–Ω—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–µ–Ω—Ç: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    thread = threading.Thread(target=auto_parse_worker, daemon=True)
    thread.start()
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RSS Parser API...")


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=settings.api.title,
    description=settings.api.description,
    version=settings.api.version,
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


def auto_parse_worker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    while True:
        try:
            print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ {datetime.now()}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –Ω–æ–≤–æ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                result = loop.run_until_complete(parsing_service.parse_all_sources())
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {result.get('total', 0)}")
            finally:
                loop.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        time.sleep(settings.parsing.auto_parse_interval)


# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/", response_model=dict)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return {
        "message": settings.api.title,
        "version": settings.api.version,
        "status": "running",
        "architecture": "clean_architecture",
        "auto_parsing": f"enabled (every {settings.parsing.auto_parse_interval} seconds)"
    }


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    return await stats_controller.get_health()


@app.post("/parse", response_model=ParseResponse)
async def manual_parse():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    return await parsing_controller.parse_all()


@app.post("/parse/rss", response_model=ParseResponse)
async def manual_parse_rss():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ RSS-–ª–µ–Ω—Ç."""
    return await parsing_controller.parse_rss()


@app.post("/parse/telegram", response_model=ParseResponse)
async def manual_parse_telegram():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ Telegram –∫–∞–Ω–∞–ª–æ–≤."""
    return await parsing_controller.parse_telegram()


@app.get("/articles", response_model=list[ArticleResponse])
async def get_articles(limit: int = 10, source: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏."""
    return await article_controller.get_articles(limit, source)


@app.get("/stats", response_model=StatsResponse)
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—å—è–º."""
    return await stats_controller.get_stats()


@app.get("/status")
async def get_parsing_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    return await parsing_service.get_parsing_status()


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main_new:app",
        host=settings.api.host,
        port=settings.api.port,
        reload=settings.api.debug
    )
