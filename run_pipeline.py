#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:
1. –ü–∞—Ä—Å–∏–Ω–≥ (—á–µ—Ä–µ–∑ API) –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
2. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
3. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
4. –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ø–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤

–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
"""

import time
import argparse
import sys
import requests
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from src.normalization.process_articles import ArticleProcessor
from src.dedup.logic import process_new_batch
from src.dedup.export_topk import export_topk
from src.database import get_db_connection


class NewsPipeline:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self, 
                 parser_url: str = "http://localhost:8000",
                 interval_seconds: int = 300,
                 k_neighbors: int = 30,
                 top_k: int = 10,
                 window_hours: int = 48):
        self.parser_url = parser_url
        self.interval_seconds = interval_seconds
        self.k_neighbors = k_neighbors
        self.top_k = top_k
        self.window_hours = window_hours
        
        self.article_processor = ArticleProcessor()
        self.db_conn = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cycles': 0,
            'total_parsed': 0,
            'total_normalized': 0,
            'total_deduplicated': 0,
            'errors': 0
        }
    
    def check_parser_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.parser_url}/health", timeout=5)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def trigger_manual_parse(self) -> int:
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API"""
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥...")
            response = requests.post(f"{self.parser_url}/parse", timeout=300)
            if response.status_code == 200:
                data = response.json()
                new_count = data.get('new_articles_count', 0)
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {new_count}")
                return new_count
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {response.status_code}")
                return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return 0
    
    def run_normalization(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        try:
            print("\n" + "="*60)
            print("üìù –≠–¢–ê–ü 2: –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø")
            print("="*60)
            
            self.article_processor.connect_db()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.article_processor.get_processing_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å:")
            print(f"   - –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {status['total_articles']}")
            print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['processed_count']}")
            print(f"   - –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['unprocessed_count']}")
            
            if status['is_up_to_date']:
                print("‚úÖ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
                return {'processed_articles': 0}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            articles = self.article_processor.load_unprocessed_articles()
            if not articles:
                print("‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
                return {'processed_articles': 0}
            
            print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º {len(articles)} —Å—Ç–∞—Ç–µ–π...")
            result = self.article_processor.process_articles_batch(articles)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return {'processed_articles': 0, 'error': str(e)}
        finally:
            self.article_processor.close_db()
    
    def run_deduplication(self) -> int:
        """–ó–∞–ø—É—Å–∫ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            print("\n" + "="*60)
            print("üîó –≠–¢–ê–ü 3: –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø –ò –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–Ø")
            print("="*60)
            
            self.db_conn = get_db_connection()
            self.db_conn.connect()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            from src.dedup.schema import init
            init(self.db_conn._connection)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ (k_neighbors={self.k_neighbors})...")
            n = process_new_batch(self.db_conn._connection, self.k_neighbors)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {n}")
            return n
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return 0
        finally:
            if self.db_conn:
                self.db_conn.close()
    
    def export_results(self) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ø–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        try:
            print("\n" + "="*60)
            print("üì§ –≠–¢–ê–ü 4: –≠–ö–°–ü–û–†–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            print("="*60)
            
            output_file = "radar_top.json"
            print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ø-{self.top_k} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞ {self.window_hours}—á...")
            
            export_topk(output_file, self.top_k, self.window_hours)
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def run_cycle(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        cycle_start = time.time()
        
        print("\n" + "="*60)
        print(f"üöÄ –ó–ê–ü–£–°–ö –¶–ò–ö–õ–ê #{self.stats['cycles'] + 1}")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
        
        cycle_stats = {
            'parsed': 0,
            'normalized': 0,
            'deduplicated': 0,
            'exported': False,
            'duration': 0
        }
        
        try:
            # –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ (–ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ–æ–Ω–µ)
            print("\n" + "="*60)
            print("üì∞ –≠–¢–ê–ü 1: –ü–ê–†–°–ò–ù–ì (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)")
            print("="*60)
            
            if self.check_parser_health():
                print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                # –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
                # cycle_stats['parsed'] = self.trigger_manual_parse()
            else:
                print("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            # –≠–¢–ê–ü 2: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            norm_result = self.run_normalization()
            cycle_stats['normalized'] = norm_result.get('processed_articles', 0)
            
            # –≠–¢–ê–ü 3: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
            if cycle_stats['normalized'] > 0:
                cycle_stats['deduplicated'] = self.run_deduplication()
            else:
                print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π)")
            
            # –≠–¢–ê–ü 4: –≠–∫—Å–ø–æ—Ä—Ç
            if cycle_stats['deduplicated'] > 0:
                cycle_stats['exported'] = self.export_results()
            else:
                print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['cycles'] += 1
            self.stats['total_parsed'] += cycle_stats['parsed']
            self.stats['total_normalized'] += cycle_stats['normalized']
            self.stats['total_deduplicated'] += cycle_stats['deduplicated']
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            self.stats['errors'] += 1
            import traceback
            traceback.print_exc()
        
        cycle_stats['duration'] = time.time() - cycle_start
        
        # –ò—Ç–æ–≥–∏ —Ü–∏–∫–ª–∞
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–ò –¶–ò–ö–õ–ê")
        print("="*60)
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {cycle_stats['duration']:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {cycle_stats['normalized']}")
        print(f"üîó –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {cycle_stats['deduplicated']}")
        print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç: {'‚úÖ' if cycle_stats['exported'] else '‚è≠Ô∏è'}")
        
        print("\n" + "="*60)
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        print(f"üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {self.stats['cycles']}")
        print(f"üìù –í—Å–µ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {self.stats['total_normalized']}")
        print(f"üîó –í—Å–µ–≥–æ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['total_deduplicated']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        return cycle_stats
    
    def run_continuous(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
        print("="*60)
        print("üéØ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("="*60)
        print(f"üì° –ü–∞—Ä—Å–µ—Ä: {self.parser_url}")
        print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"üîç K-neighbors: {self.k_neighbors}")
        print(f"üìä Top-K: {self.top_k}")
        print(f"üïí –û–∫–Ω–æ: {self.window_hours} —á–∞—Å–æ–≤")
        print("="*60)
        print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        try:
            while True:
                self.run_cycle()
                
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.interval_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                print(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {datetime.fromtimestamp(time.time() + self.interval_seconds).strftime('%Y-%m-%d %H:%M:%S')}")
                
                time.sleep(self.interval_seconds)
                
        except KeyboardInterrupt:
            print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
            print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {self.stats['cycles']}")
            print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {self.stats['total_normalized']}")
            print(f"   –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {self.stats['total_deduplicated']}")
            print(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
            print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    parser = argparse.ArgumentParser(
        description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 –º–∏–Ω—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python run_pipeline.py

  # –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 –º–∏–Ω—É—Ç
  python run_pipeline.py --interval 600

  # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
  python run_pipeline.py --once

  # –° –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  python run_pipeline.py --interval 300 --k-neighbors 50 --top-k 20
        """
    )
    
    parser.add_argument('--parser-url', default='http://localhost:8000',
                        help='URL –ø–∞—Ä—Å–µ—Ä–∞ API (default: http://localhost:8000)')
    parser.add_argument('--interval', type=int, default=300,
                        help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (default: 300 = 5 –º–∏–Ω—É—Ç)')
    parser.add_argument('--k-neighbors', type=int, default=30,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (default: 30)')
    parser.add_argument('--top-k', type=int, default=10,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–æ–≤—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (default: 10)')
    parser.add_argument('--window-hours', type=int, default=48,
                        help='–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —á–∞—Å–∞—Ö (default: 48)')
    parser.add_argument('--once', action='store_true',
                        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –∏ –≤—ã–π—Ç–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = NewsPipeline(
        parser_url=args.parser_url,
        interval_seconds=args.interval,
        k_neighbors=args.k_neighbors,
        top_k=args.top_k,
        window_hours=args.window_hours
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    if args.once:
        print("üéØ –†–µ–∂–∏–º: –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫\n")
        pipeline.run_cycle()
    else:
        print("üéØ –†–µ–∂–∏–º: –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∑–∞–ø—É—Å–∫\n")
        pipeline.run_continuous()


if __name__ == "__main__":
    main()

