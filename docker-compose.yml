version: '3.8'

services:
  # Парсер новостей (RSS + Telegram)
  parser:
    build:
      context: .
      dockerfile: Dockerfile.parser
    container_name: alphapulse_parser
    network_mode: "host"  # Используем host network для доступа к локальной БД
    environment:
      # PostgreSQL подключение (локальная БД на VM)
      POSTGRES_HOST: ${POSTGRES_HOST:-localhost}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-alphapulse}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-04102025}
      
      # Telegram API (для парсинга каналов)
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_PHONE: ${TELEGRAM_PHONE}
      
      # Настройки парсера
      PARSER_CHECK_INTERVAL: ${PARSER_CHECK_INTERVAL:-300}  # 5 минут
      PARSER_BATCH_SIZE: ${PARSER_BATCH_SIZE:-50}
    
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    
    command: python -u parser_worker.py
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep parser_worker.py || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Воркер для обработки пайплайна (Нормализация → Дедупликация → LLM)
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: alphapulse_pipeline
    network_mode: "host"  # Используем host network для доступа к локальной БД
    environment:
      # PostgreSQL подключение (локальная БД на VM)
      POSTGRES_HOST: ${POSTGRES_HOST:-localhost}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-alphapulse}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-04102025}
      
      # OpenRouter API
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      LLM_MODEL: ${LLM_MODEL:-anthropic/claude-3.5-haiku}
      LLM_ANALYSIS_MODEL: ${LLM_ANALYSIS_MODEL:-anthropic/claude-3.5-sonnet}
      LLM_DELAY: ${LLM_DELAY:-1.0}
      
      # Настройки пайплайна
      PIPELINE_CHECK_INTERVAL: ${PIPELINE_CHECK_INTERVAL:-300}  # 5 минут
      PIPELINE_BATCH_SIZE: ${PIPELINE_BATCH_SIZE:-100}
      PIPELINE_LLM_LIMIT: ${PIPELINE_LLM_LIMIT:-50}
    
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    
    command: python -u pipeline_worker.py
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep pipeline_worker.py || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Telegram бот
  telegram_bot:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    container_name: alphapulse_telegram_bot
    network_mode: "host"  # Используем host network для доступа к локальной БД
    environment:
      # PostgreSQL подключение (локальная БД на VM)
      POSTGRES_HOST: ${POSTGRES_HOST:-localhost}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-alphapulse}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-04102025}
      
      # Telegram
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}  # Опционально для обратной совместимости
      
      # OpenRouter API для генерации анализа
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      LLM_MODEL: ${LLM_MODEL:-anthropic/claude-3.5-haiku}
      LLM_ANALYSIS_MODEL: ${LLM_ANALYSIS_MODEL:-anthropic/claude-3.5-sonnet}
      
      # Мониторинг горячих новостей
      HOT_NEWS_THRESHOLD: ${HOT_NEWS_THRESHOLD:-0.7}
      HOT_NEWS_INTERVAL: ${HOT_NEWS_INTERVAL:-60}
    
    volumes:
      - ./.env:/app/.env:ro
    
    command: python -u run_telegram_bot.py
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep run_telegram_bot.py || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ПРИМЕЧАНИЕ: PostgreSQL запущен локально на VM (localhost:5432)
# Контейнеры используют network_mode: "host" для прямого доступа
# Убедитесь, что PostgreSQL настроен на прослушивание localhost
# и имеет созданную БД "alphapulse" с пользователем "admin"
#
# ПОДПИСЧИКИ: Пользователи подписываются через команду /subscribe в боте
# Подписки хранятся в таблице telegram_subscribers
# TELEGRAM_CHAT_ID больше не обязателен (используется только для legacy)
#
# ПОТОК ДАННЫХ:
# Parser → financial_news_view → normalized_articles → story_clusters → llm_analyzed_news → Telegram Bot
